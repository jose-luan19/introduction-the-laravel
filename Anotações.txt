# Anotações pessoais do curso de Laravel 6.*

## Primeiras impressõs: a pasta app possui basicamente a lógica da aplicação e a subpasta view que fica dentro de resources possui a parte de interface, ou seja o que o usario irá de fato utilizar

## O Laravel aparentemente usa com padrão de projeto default o MVC, e na parte de banco o padrão factory

## As routes são utilizadas para passar paramentros para as views, com a facilidade do compact 

## O Laravel possui migrations

## comando para registrar a table migration: php artisan migrate:install

## Os modelos de tabelas ficam na pasta de migration e para subir para o banco, deve-se executar as funções up via terminal

## Comando para criar tabela via artisan: php artisan make:migration create_[nomeTabela]_table

## Comando para rotar as migrations: php artisan migrate

## Comando para retornar ações de migração: php artisan migrate:rollback [optional] --steps=1

## Comando para sicronizar o banco com as migrations: php artisan migrate:fresh
Obs.* se for criada tables sem o migration esse comando apaga todas elas, pois ele foca na tabela onde está registrada as migrations

## comando para sicronizar todas as tabelas: php artisan migrate:refresh
Obs.* esse comando atualiza tudo e não apaga as tables criadas sem o migration

## Seeders são as funções para população do banco, comando para criar: php artisan make:seeder [NameTable]TableSeeder

## comando para alimentar o banco: php artisan db:seed

## comando para apagar e atualizar as tabelas e alimenta-las: php artisan migrate:refresh --seed

## Para criar model's que irá representar nossas tabelas no banco, usa-se: php artisan make:model [Model]

## Criar model e arquivo migration referenciando o model: php artisan make:model [Model] -m

## A ORM utilizada pelo laravel é o Eloquent
Rememeber: Mapeamento objeto-relacional é uma técnica de desenvolvimento utilizada para reduzir a impedância da programação orientada aos objetos utilizando bancos de dados relacionais.

## Por default os models são associados as tabelas onde é feito a seguinte afirmação Model: User -> Table: users . Se o banco e os models não possuirem esse padrão é preciso informar ao Laravel qual table aquele model representa.

## É possivel utilizar dois padrões na ORM: Active Record e o Mass Assignment & Mass Update

## $fillable: para construir um novo registro esses são os campos obrigatorios a serem preenchidos

## $hidden: Ao realizar uma consulta, esse hiden esconde os campos que foram declarados nele

## $cast: Ao fazer a consulta, é possivel fazer a consersão de tipo no retorno json ex.: 'name' => 'boolean'

## Relacionamento Eloquent:
	1:1 - hasOne e belongsTo
	1:N - hasMany e belongsTo
	N:N - belongsToMany
	
## Por padrão o Laravel irá buscar a tabela de pivô usando os nomes da tabelas em ordem alfabetica: Ex.: Tables - products & categories, ele irá buscsar a table categories_products. Caso tenha um nome diferente do padrão, deve-se informar na function do belongsToMany como o segundo parametro 

## Funcão each() após o create faz com que a cada registro criado em uma tabela eu posso salvar outro registro em outra tabela e já associa a chave enstrangeira

## Para realizar querys INNER'S JOIN'S de uma relação 1:1, é possivel bucar em um model com o find() e associar a um outro model sem precisar de chamada de metodos
Obs1.: Nas relações 1:1 e 1:N o Laravel nos retorna o objeto, já em relações N:N ele retorna uma Collection

## Comando para gerar Controllers: php artisan make:contoller [CaminhoDoController/NomeDoController]

## Os metodos mais importantes de Routes :
Route::get -- consulta
Route::post -- cria
Route::put -- atualiza
Route::patch -- atualiza
Route::delete
Route::options -- dentro do HTTP ela retorna qual cabeçalho a rota especifica responde
onde os parametros são o caminho e uma function
Route::prefix()->namespace()->group(function(){})

## Os controllers irá carregar o html a partir das views, com o comando view('[CAMINHO_DA_VIEW]')
Obs.: Ainda é possivel passar dados para view com o compact('[OBJETO]')

## Token de autorização de insersão de conteudo: {{csrf_token}} ou @csrf

## Criar templates é preciso prepara-lo para exportação com @yield(NOME_TEMPLATE)

## Para adicionar templates a paginas, deve exportar com o @extends('[CAMINHO.NOME_ARQUIVO]')

## Em seguida definir onde o template será usado com @section('NOME_TEMPLATE') e @endsection

## Uma boa prática, referenciar os links por apelidos definidos no name das Routes.

## Comando para adicionar extensões: composer req [laracasts/flash]

## Ferramenta de mensagens laracasts/flash

## Para criar um Controller com recursos bonitinhos: php artisan make:contoller [CaminhoDoController/NomeDoController] -r
Obs.: E se utilizar o Route::resource('[caminho]','[controller]') ele já cria todas as conexões de rotas

## Se importar o model ao controller e criar o construtor do controller que tem como parametro o model e a variavel, o Laravel realiza a injenção de dependência e quando der um new no controller automaticamente dará um new no model. Isso irá ajudar nas chamadas de metodos do model.

## Para remover registro usando o request DELETE é preciso que seja solicitado esse tipo de solicitação, não será feito mais com o verbo GET

## É possivel fazer com que o formulario trabalhe com os outros methods http através com um input:hidden e com o value contendo o nome do verbo HTTP
OU: @method("[method]")

## Instalação do "automatizador" de autenticação: composer require laravel/ui "^[version]"

## Criação de views, routes e controller de login: php artisan ui:auth

## middleware meio para verificar se o usuario está logado
obs. código ou programa entre requisição e a aplicação

## É possivel associar middleware para rotas especificas, por exemplo só irá para tal rota caso a checagem do middleware estej ok

## Route::group: gerencia um conjunto de rotas a partir de um middleware e uma function

## Condicionais de views @auth- verficica se está logado ; @guest- verifica se não está logado

## auth()->user() : resgata objeto em relação o usuario logado  

## link validations request: https://laravel.com/docs/6.x/validation#available-validation-rules

## Para aplicar validações de campos, deve-se criar uma Request para cada model especifico, e implmentar em quais campos deve-se validar e qual o tipo de validação
Comando: php artisan make:request [nome do request]

## E utilizar nos controllers, a Request que criou, isso já irá validar os inputs programados no Request

## Para  visualizar os erros na view, basta usar as tags:
@error 
	{{$message}} 
@enderror

## Para que a navegação fique com o item ativo em todas as url's 'filhas' deve se usar o *, parecido com o import de um biblioteca por completo em java 'admin/stores*'

## Para criar middlewares proprios usa-se o comando: php artisan make:middleware [nome do middleware]. E deve registrar no arquivo Kernel.php na function routeMiddleware como deve ser a chamada do middleware criado 